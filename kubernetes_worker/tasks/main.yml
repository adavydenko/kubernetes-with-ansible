---
# tasks file for kubernetes_worker

# 1. Install required packages first & clean keyrings
- name: Install required packages
  apt:
    pkg:
      - curl
      - gpg
      - apt-transport-https
      - ca-certificates
    state: present
    update_cache: true
  
# 2. Disable swap
- name: Disable swap
  command:
    cmd: swapoff -a
    
- name: Ensure swap is disabled on boot
  command:
    cmd: sudo sed -i -e '/\/swap.img\s\+none\s\+swap\s\+sw\s\+0\s\+0/s/^/#/' /etc/fstab

# 3. Install container runtime (docker, containerd)
- name: Install docker
  apt:
    name: docker.io
    state: present
    update_cache: true
    
# - name: Install containerd runtime
#  command:
#    cmd: curl -LO https://github.com/containerd/containerd/releases/download/v1.7.22/containerd-1.7.22-linux-arm64.tar.gz
    
# - name: Unpack containerd
#  ansible.builtin.command:
#    cmd: sudo tar Cxzvf /usr/local containerd-1.7.22-linux-arm64.tar.gz
    
# - name: Download containerd systemd file
#  ansible.builtin.command:
#    cmd: curl -LO https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    
# - name: Create folder for the service
#  file:
#    path: /usr/lib/systemd/system
#    mode: 0755
#    state: directory
    
# - name: Move containerd to services
#  command: mv containerd.service /usr/lib/systemd/system
  
# - name: containerd config folder
#  file: 
#    path: /etc/containerd
#    mode: 0755
#    state: directory
    
# 4. Configure container runtime
- name: Add kernel modules for Containerd
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
      
- name: Load kernel modules for cintainerd
  shell:
    cmd: modprobe overlay && modprobe br_netfilter
  become: true
  
- name: Add kernel parameters to Kubernetes
  copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      
- name: Load kernel parameter changes
  command:
    cmd: sudo sysctl --system
    
#- name: create containerd config file
#  ansible.builtin.shell:
#    cmd: sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null

- name: Create containerd config file
  command:
    cmd: sudo sh -c "containerd config default > /opt/containerd/config.toml"

- name: Enable systemd cgroup driver
  ansible.builtin.command:
    cmd: sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /opt/containerd/config.toml
    
- name: Reload systemd configuration
  command:
    cmd: systemctl daemon-reload
    
- name: Restart containerd service
  service:
    name: containerd
    state: restarted
    
# 5. Firewall configurations
- name: Allow 6443/tcp though firewall
  command:
    cmd: sudo ufw allow 6443/tcp
    
- name: Allow 2379:2380/tcp though firewall
  command:
    cmd: sudo ufw allow 2379:2380/tcp
    
- name: Allow 22/tcp though firewall
  command:
    cmd: sudo ufw allow 22/tcp
    
- name: Allow 8080/tcp though firewall
  command:
    cmd: sudo ufw allow 8080/tcp
    
- name: Allow 10250:10252/tcp though firewall
  command:
    cmd: sudo ufw allow 10250:10252/tcp
    
- name: Allow 10255/tcp though firewall
  command:
    cmd: sudo ufw allow 10255/tcp
    
- name: Allow 5473/tcp though firewall
  command:
    cmd: sudo ufw allow 5473/tcp
    
- name: Enable firewall
  ufw:
    state: enabled
  changed_when: false
    
- name: Reload firewall
  command:
    cmd: sudo ufw reload
  changed_when: false
    
# 6. Configure k8s repository for further installation

- name: Remove keyrings directory (if exists)
  shell:
    cmd: rm -rf /etc/apt/keyrings
    
- name: Remove existing k8s directory (if exists)
  shell:
    cmd: sudo rm -rf /etc/apt/sources.list.d/pkgs_k8s_io_core_stable_v1_31_deb.list

- name: Prepare keyrings directory and update permissions
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
    
- name: Download k8s GPG key sercurely
  shell:
    cmd: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/k8s-apt-keyring.gpg
    
- name: Add k8s repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/k8s-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"
    state: present
    
- name: Install kubeadm, kubelet, kubectl
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: true
    
- name: Hold kubelet, kubeadm, kubectl packages
  command:
    cmd: sudo apt-mark hold kubelet kubeadm kubectl
    
# 7. Kubelet configuration
- name: Replace /etc/default/kubelet contents
  copy:
    dest: /etc/default/kubelet
    content: 'KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"'
    
- name: Reload systemd configuration
  command:
    cmd: systemctl daemon-reload
    
- name: Restart kubelet service
  service:
    name: kubelet
    state: restarted
      
- name: Reboot the system
  reboot:
    msg: "Reboot initiated by Ansible for k8s setup"
    reboot_timeout: 180
    
# 8. Join k8s master (idempotent)
- name: Join worker node to cluster if not joined
  ansible.builtin.command:
    cmd: "{{ hostvars['localhost'].kubeadm_join_command }} --ignore-preflight-errors=all"
    creates: /etc/kubernetes/kubelet.conf
  become: true
