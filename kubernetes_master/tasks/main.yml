# Some common OS setup for all the nodes
- name: Pre-configure nodes
  block:
  # tasks file for kubernetes_master
  # 1. Install required packages first & clean keyrings
  - name: Install required packages
    ansible.builtin.apt:
      pkg:
      - curl
      - gnupg2
      - apt-transport-https
      - ca-certificates
      state: present
      update_cache: true
    become: true

  # 2. Disable swap
  - name: Disable swap
    ansible.builtin.command:
      cmd: swapoff -a
    when: ansible_swaptotal_mb | int > 0

  - name: Ensure swap is disabled on boot
    ansible.builtin.lineinfile:
      path: /etc/fstab
      regexp: '^.*\s+swap\s+'
      state: absent

# Install containerd on host (Docker not required)
- name: Containerd install and configure
  block:

  # - name: Install containerd runtime
  #  command:
  #    cmd: curl -LO https://github.com/containerd/containerd/releases/download/v1.7.22/containerd-1.7.22-linux-arm64.tar.gz

  # - name: Unpack containerd
  #  ansible.builtin.command:
  #    cmd: sudo tar Cxzvf /usr/local containerd-1.7.22-linux-arm64.tar.gz

  # - name: Download containerd systemd file
  #  ansible.builtin.command:
  #    cmd: curl -LO https://raw.githubusercontent.com/containerd/containerd/main/containerd.service

  # - name: Create folder for the service
  #  file:
  #    path: /usr/lib/systemd/system
  #    mode: 0755
  #    state: directory

  # - name: Move containerd to services
  #  command: mv containerd.service /usr/lib/systemd/system

  # - name: containerd config folder
  #  file:
  #    path: /etc/containerd
  #    mode: 0755
  #    state: directory

  # 4. Configure container runtime
  - name: Add kernel modules for Containerd
    ansible.builtin.copy:
      dest: /etc/modules-load.d/containerd.conf
      content: |
        overlay
        br_netfilter
      mode: '0644'

  - name: Load kernel modules for containerd
    ansible.builtin.shell:
      cmd: modprobe overlay && modprobe br_netfilter
    become: true

  - name: Ensure containerd config directory exists
    ansible.builtin.file:
      path: /etc/containerd
      state: directory
      mode: '0755'

  - name: Generate default containerd configuration if missing
    ansible.builtin.command:
      cmd: containerd config default
    register: containerd_default_cfg
    changed_when: false
    args:
      creates: /etc/containerd/config.toml

  - name: Write containerd config with systemd cgroup driver
    ansible.builtin.copy:
      dest: /etc/containerd/config.toml
      mode: '0644'
      content: "{{ containerd_default_cfg.stdout | regex_replace('SystemdCgroup = false', 'SystemdCgroup = true') }}"
    notify: Restart containerd

- name: Add kernel parameters to Kubernetes
  ansible.builtin.copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
    mode: '0644'

- name: Load kernel parameter changes
  ansible.builtin.command:
    cmd: sudo sysctl --system
  changed_when: false

# containerd config handled above via handler

# 5. Firewall configurations
- name: Allow 6443/tcp through firewall
  ansible.builtin.command:
    cmd: sudo ufw allow 6443/tcp

- name: Allow 2379:2380/tcp through firewall
  ansible.builtin.command:
    cmd: sudo ufw allow 2379:2380/tcp

- name: Allow 22/tcp through firewall
  ansible.builtin.command:
    cmd: sudo ufw allow 22/tcp

- name: Allow 8080/tcp through firewall
  ansible.builtin.command:
    cmd: sudo ufw allow 8080/tcp

- name: Allow 10250:10252/tcp through firewall
  ansible.builtin.command:
    cmd: sudo ufw allow 10250:10252/tcp

- name: Allow 10255/tcp through firewall
  ansible.builtin.command:
    cmd: sudo ufw allow 10255/tcp

- name: Allow 5473/tcp through firewall
  ansible.builtin.command:
    cmd: sudo ufw allow 5473/tcp

- name: Enable firewall
  ansible.builtin.command:
    cmd: sudo ufw enable
  changed_when: false

- name: Reload firewall
  ansible.builtin.command:
    cmd: sudo ufw reload
  changed_when: false

# 6. Configure k8s repository for further installation

- name: Ensure keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Remove obsolete k8s apt source list if present
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/pkgs_k8s_io_core_stable_v1_31_deb.list
    state: absent

- name: Prepare keyrings directory and update permissions
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download k8s GPG key securely
  ansible.builtin.shell:
    cmd: curl -fsSL {{ k8s_repo_url }}Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/k8s-apt-keyring.gpg
    creates: /etc/apt/keyrings/k8s-apt-keyring.gpg

- name: Add k8s repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/k8s-apt-keyring.gpg] {{ k8s_repo_url }} /"
    state: present

- name: Install kubeadm, kubelet, kubectl
  ansible.builtin.apt:
    name:
    - kubelet
    - kubeadm
    - kubectl
    state: present
    update_cache: true

- name: Hold kubelet, kubeadm, kubectl packages
  ansible.builtin.command:
    cmd: sudo apt-mark hold kubelet kubeadm kubectl

# 7. Kubelet configuration
  # Skip overriding kubelet extra args when using containerd

- name: Reload systemd configuration
  ansible.builtin.command:
    cmd: systemctl daemon-reload

- name: Restart kubelet service
  ansible.builtin.service:
    name: kubelet
    state: restarted

  # Skipping profile export to reduce side effects

  # Reboot skipped by default

# Docker configuration removed; using containerd only

- name: Pull kubeadm container images
  ansible.builtin.command:
    cmd: sudo kubeadm config images pull

# 8. k8s setup
- name: Initialize k8s control plane
  ansible.builtin.command:
    cmd: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
    creates: /etc/kubernetes/admin.conf
  register: kubeadm_init_output
  become: true
  run_once: true

- name: Set permissions for Kubernetes admin
  ansible.builtin.file:
    path: /etc/kubernetes/admin.conf
    state: file
    mode: '0755'

- name: Generate join command
  ansible.builtin.command:
    cmd: kubeadm token create --print-join-command
  register: join_cmd
  changed_when: false
  run_once: true
  become: true

- name: Set join command fact for all hosts
  ansible.builtin.set_fact:
    kubeadm_join_command: "{{ join_cmd.stdout }}"
  run_once: true
  delegate_to: localhost
  delegate_facts: true
